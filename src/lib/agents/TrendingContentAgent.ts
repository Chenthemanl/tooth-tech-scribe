
import { BaseAgent, AgentSuggestion, AgentAnalysisContext } from './BaseAgent';

export class TrendingContentAgent extends BaseAgent {
  async analyze(context: AgentAnalysisContext): Promise<AgentSuggestion[]> {
    const { articles = [] } = context;

    if (articles.length === 0) {
      return [];
    }

    const publishedArticles = articles.filter(article => article.status === 'published');
    const prompt = this.buildPrompt(publishedArticles);

    try {
      const aiResponse = await this.performAIAnalysis(prompt);
      const suggestions = this.createSuggestionsFromAI(aiResponse, publishedArticles);
      return suggestions;
    } catch (error) {
      console.error(`TrendingContentAgent failed: ${error}`);
      // Return empty array or a specific error suggestion
      return [];
    }
  }

  private buildPrompt(articles: any[]): string {
    const articlesData = articles.map(a => ({
      id: a.id,
      title: a.title,
      views: a.views || 0,
      created_at: a.created_at,
    }));

    const defaultPrompt = `Analyze the provided articles based on views and creation date to identify the top 3 trending ones. Return a JSON object with a key "trending_articles", containing an array of objects. Each object must include "article_id", "reasoning", and "confidence_score" (a number between 0 and 1). If none are trending, return an empty array. Article data: ${JSON.stringify(articlesData)}`;
    
    // Use the customizable prompt template from the config if it exists
    const promptTemplate = this.config.prompt_template || defaultPrompt;
    
    // A simple way to inject data if the template has a placeholder
    if (promptTemplate.includes('{articles_data}')) {
      return promptTemplate.replace('{articles_data}', JSON.stringify(articlesData, null, 2));
    }
    
    return promptTemplate;
  }

  private createSuggestionsFromAI(aiResponse: any, allArticles: any[]): AgentSuggestion[] {
    const suggestions: AgentSuggestion[] = [];
    const trendingFromAI = aiResponse.trending_articles || [];

    if (trendingFromAI.length === 0) {
      return [];
    }
    
    // Create suggestion for the top article
    const topArticleInfo = trendingFromAI[0];
    const topArticle = allArticles.find(a => a.id === topArticleInfo.article_id);
    if (topArticle) {
      suggestions.push({
        target_type: 'hero_section',
        target_id: 'main',
        suggestion_data: {
          article_id: topArticle.id,
          article_title: topArticle.title,
          article_slug: topArticle.slug,
          views: topArticle.views,
        },
        reasoning: topArticleInfo.reasoning,
        confidence_score: topArticleInfo.confidence_score,
        priority: this.calculatePriority(topArticleInfo.confidence_score, 0.9, topArticleInfo.confidence_score),
        expires_at: new Date(Date.now() + 12 * 60 * 60 * 1000)
      });
    }

    // Create suggestions for secondary articles
    const secondaryArticlesInfo = trendingFromAI.slice(1, 3);
    secondaryArticlesInfo.forEach((info: any, i: number) => {
      const article = allArticles.find(a => a.id === info.article_id);
      if (article) {
        suggestions.push({
          target_type: 'featured_section',
          target_id: `featured-${i + 1}`,
          suggestion_data: {
            article_id: article.id,
            article_title: article.title,
            article_slug: article.slug,
            views: article.views,
          },
          reasoning: info.reasoning,
          confidence_score: info.confidence_score,
          priority: this.calculatePriority(info.confidence_score, 0.7, info.confidence_score),
          expires_at: new Date(Date.now() + 18 * 60 * 60 * 1000)
        });
      }
    });

    return suggestions;
  }

  explainReasoning(suggestion: AgentSuggestion): string {
    return `This suggestion was generated by an AI model (${this.config.ai_model || 'default AI'}) based on real-time content analysis. The AI's reasoning was: "${suggestion.reasoning}"`;
  }
}
